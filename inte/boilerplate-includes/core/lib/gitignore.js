const fs = require('fs-extra'),
    log = require('./log'),
    glob = require('glob'),
    os = require('os'),
    config = require('../../frontendboilerplate-configuration'),
    upath = require('upath'),
    javascript = require('./javascript'),
    rls = require('remove-leading-slash');

module.exports = {
    generate: function (echo) {
        var success = true;
        var gitIgnoreRules = '';
        var source = upath.join('./', 'boilerplate-includes', '.gitignore');
        if (config.extension_mode) {
            var manifests = glob.sync(rls(upath.join(rls(config.generateHtml.output), 'manifest.*.json')));
            manifests.forEach(function (file) {
                var browser = upath.basename(file, '.json').replace('manifest.', '') + '-extension/';
                gitIgnoreRules += browser + os.EOL;
            });
        }
        if (config.generateHtml.enable) {
            if (config.generateHtml.enable_index) {
                gitIgnoreRules += rls(upath.join(rls(config.generateHtml.output), 'index.html')) + os.EOL;
                gitIgnoreRules += rls(upath.join(rls(config.generateHtml.output), 'frontend-boilerplate-documentation')) + os.EOL;
            }
            var htmlFiles = glob.sync(rls(upath.join(rls(config.generateHtml.src), '**', '*.twig')), {
                ignore: [
                    "**/_*.twig"
                ]
            });
            htmlFiles.forEach(function (file) {
                var destination = rls(upath.join(rls(config.generateHtml.output), upath.basename(file, '.twig') + '.html'));
                var fileContent = fs.readFileSync(file, 'utf8');
                var regex = new RegExp("\\{%\\s*set\\s*output_path\\s*=\\s*['\"]?(.+?)['\"]?\\s*%\\}", 'gmiu');
                var matches = regex.exec(fileContent);
                if (matches !== null) {
                    destination = rls(upath.join(upath.dirname(destination), rls(matches[1])));
                }
                gitIgnoreRules += destination + os.EOL;
            });
        }
        if (config.generateCss.enable) {
            var css_Files = '';
            var cssFiles = glob.sync(rls(upath.join(rls(config.generateCss.src_path), '**', '*.scss')), {
                ignore: [
                    "**/_*.scss"
                ]
            });
            cssFiles.forEach(function (file) {
                var fileContent = fs.readFileSync(file, 'utf8');
                var regex = new RegExp("\\$output_path:\\s*['\"]?(.+?)['\"]?\\s*;", 'gmiu');
                var matches = regex.exec(fileContent);
                var destination = false;
                if (matches !== null) {
                    destination = rls(matches[1]);
                }
                if (destination) {
                    css_Files += rls(destination) + os.EOL +
                        rls(destination + '.map') + os.EOL;
                }
            });
            gitIgnoreRules += css_Files;
        }
        if (config.generateJs.enable) {
            var jsFiles = javascript.getMainJavascriptFiles();
            jsFiles.forEach(function (file) {
                var fileConfig = javascript.getFileConfig(file, false);
                if (fileConfig) {
                    if (fileConfig.output_path) {
                        gitIgnoreRules += rls(fileConfig.output_path) + '.map' + os.EOL +
                            rls(fileConfig.output_path) + os.EOL;
                    }
                }
            });
        }
        if (fs.pathExistsSync(source)) {
            var fileContent = fs.readFileSync(source, 'utf8');
            var finalContent = '### /!\\ Do not edit this file. See : boilerplate-includes/.gitignore /!\\ ###' + os.EOL +
                '### Rules generated by `yarn run boilerplate gitignore` ###' + os.EOL +
                gitIgnoreRules +
                rls(config.generateFavicon.output) + os.EOL +
                '### Rules from boilerplate-includes/.gitignore ###' + os.EOL + fileContent + os.EOL +
                '### /!\\ Do not edit this file. See : boilerplate-includes/.gitignore /!\\ ###';
            try {
                fs.outputFileSync('./.gitignore', finalContent);
                if (echo) {
                    log.fileHasBeenGenerated('.gitignore');
                }
            } catch (err) {
                success = false;
                if (echo) {
                    log.error({
                        title: 'Possible permission Error',
                        msg: 'Cannot update or create file. Please check permissions',
                        additionnalData: './.gitignore'
                    });
                }
            }
        } else {
            success = false;
            if (echo) {
                log.error({
                    title: 'Gitignore compilation Error',
                    msg: 'A file is missing',
                    additionnalData: source
                });
            }
        }
        return success;
    }
};